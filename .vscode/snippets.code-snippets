{
    "serverservice": {
        "prefix": "serverservice",
        "description": "Creates a server matter service",
        "body": [
            "import { World } from \"@rbxts/matter\";",
            "import { ServerParams, ServerService } from \"types/generic\";",
            "",
            "export default class ${TM_FILENAME_BASE/(.)/${1:/capitalize}/}Service implements ServerService {",
            "\t/** @hidden */",
            "\tpublic onInit(world: World, [state]: ServerParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onStart(world: World, [state]: ServerParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onRender(world: World, [state]: ServerParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onPhysics(world: World, [state]: ServerParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onHeartbeat(world: World, [state]: ServerParams): void {}",
            "}",
            ""
        ]
    },
    "clientservice": {
        "prefix": "clientservice",
        "description": "Creates a client matter service",
        "body": [
            "import { World } from \"@rbxts/matter\";",
            "import { ClientParams, ClientService } from \"types/generic\";",
            "",
            "export default class ${TM_FILENAME_BASE/(.)/${1:/capitalize}/}Service implements ClientService {",
            "\t/** @hidden */",
            "\tpublic onInit(world: World, [state]: ClientParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onStart(world: World, [state]: ClientParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onRender(world: World, [state]: ClientParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onPhysics(world: World, [state]: ClientParams): void {}",
            "",
            "\t/** @hidden */",
            "\tpublic onHeartbeat(world: World, [state]: ClientParams): void {}",
            "}",
            ""
        ]
    },

    "spawnerFunction": {
        "prefix": "spawner",
        "description": "fill in the callback function for a spawner",
        "body": [
            "(world: World, spawner: Part) => {",
                "return world.spawn();",
            "}"
        ]
    }
}